//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Khaled/Settings/Troubadour.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Troubadour: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Troubadour()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Troubadour"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""7692a305-c418-473c-8eb1-2a244c79a433"",
            ""actions"": [
                {
                    ""name"": ""Left_hand"",
                    ""type"": ""Button"",
                    ""id"": ""6b25be89-2b98-427a-904a-c50933f8b62e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left_legs"",
                    ""type"": ""Button"",
                    ""id"": ""03c642b0-42c8-431d-b15c-451788485384"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_hand"",
                    ""type"": ""Button"",
                    ""id"": ""330b05b9-d828-4748-9fc0-12f5f5f198ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right_legs"",
                    ""type"": ""Button"",
                    ""id"": ""ea934e03-bfeb-47c2-a26d-60a5bd92afa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9f4bbb2-b5e7-443d-a7b7-8321b94dfc0a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Left_hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6acb8c6-aa1e-4f84-8425-5ec51689d80d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Left_legs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc61e1a5-15b5-44ad-8e6e-3e4bfd8262db"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Right_hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60875ba0-8b7c-43b7-80c0-10fe5d198855"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Right_legs"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Left_hand = m_Player.FindAction("Left_hand", throwIfNotFound: true);
        m_Player_Left_legs = m_Player.FindAction("Left_legs", throwIfNotFound: true);
        m_Player_Right_hand = m_Player.FindAction("Right_hand", throwIfNotFound: true);
        m_Player_Right_legs = m_Player.FindAction("Right_legs", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Left_hand;
    private readonly InputAction m_Player_Left_legs;
    private readonly InputAction m_Player_Right_hand;
    private readonly InputAction m_Player_Right_legs;
    public struct PlayerActions
    {
        private @Troubadour m_Wrapper;
        public PlayerActions(@Troubadour wrapper) { m_Wrapper = wrapper; }
        public InputAction @Left_hand => m_Wrapper.m_Player_Left_hand;
        public InputAction @Left_legs => m_Wrapper.m_Player_Left_legs;
        public InputAction @Right_hand => m_Wrapper.m_Player_Right_hand;
        public InputAction @Right_legs => m_Wrapper.m_Player_Right_legs;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Left_hand.started += instance.OnLeft_hand;
            @Left_hand.performed += instance.OnLeft_hand;
            @Left_hand.canceled += instance.OnLeft_hand;
            @Left_legs.started += instance.OnLeft_legs;
            @Left_legs.performed += instance.OnLeft_legs;
            @Left_legs.canceled += instance.OnLeft_legs;
            @Right_hand.started += instance.OnRight_hand;
            @Right_hand.performed += instance.OnRight_hand;
            @Right_hand.canceled += instance.OnRight_hand;
            @Right_legs.started += instance.OnRight_legs;
            @Right_legs.performed += instance.OnRight_legs;
            @Right_legs.canceled += instance.OnRight_legs;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Left_hand.started -= instance.OnLeft_hand;
            @Left_hand.performed -= instance.OnLeft_hand;
            @Left_hand.canceled -= instance.OnLeft_hand;
            @Left_legs.started -= instance.OnLeft_legs;
            @Left_legs.performed -= instance.OnLeft_legs;
            @Left_legs.canceled -= instance.OnLeft_legs;
            @Right_hand.started -= instance.OnRight_hand;
            @Right_hand.performed -= instance.OnRight_hand;
            @Right_hand.canceled -= instance.OnRight_hand;
            @Right_legs.started -= instance.OnRight_legs;
            @Right_legs.performed -= instance.OnRight_legs;
            @Right_legs.canceled -= instance.OnRight_legs;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnLeft_hand(InputAction.CallbackContext context);
        void OnLeft_legs(InputAction.CallbackContext context);
        void OnRight_hand(InputAction.CallbackContext context);
        void OnRight_legs(InputAction.CallbackContext context);
    }
}
